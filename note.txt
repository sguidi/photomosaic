Based on the assignment description i took the following assumptions:
 
 *  The application need a browser that support Canvas, Promise and Web Workers.
    It will not be enabled and suggest the user to update its browser otherwise.

 *  The application will allow the use to transform only one image at a specific time.
    Last processed (full or partial) image is kept on screen until a new file is selected.
 
 *  Transform of big images is a slow process and without refreshing the application the user is forced to wait before select another image.
    I decided that the possibility to interrupt the operation was a simple and worth addition to the UX.
 
 *  Result mosaic image is displayed in original size on the page, this can be ugly on small screen device.
    I ignored this issue as assignment accept a minimal UI implementation
 
 *  Without image resize the uploaded image size is not guarateed to be a multiple of the tile size.
    I assumed that all the result mosaic tiles must respect the specified size.
    Oddment of image slicing can end up in a bigger image with last row/col stretched to the tile size or the oddment can be cut off.
    I decided for the second option

Solution:

    Technical approach:

        The application use the HTML Canvas to render the result mosaic as aggregation of server retrieved tiles.
        Non trivial operation are of asyncronous nature and some of them heavy on time or computation consume.
        In order to keep the UI responsive to the user and improve the performance the mosaic computation use parallelism and asynchrony.
        This is implemented via Promise and Worker.

    Application modules:
        
        Utils: a collection of function of generic utility without dependency from the mosaic application code.
        It can be consider a library extendible and reusable in other projects.

        ThreadPool: an implementation of a Threads Pool based on Worker configurable with size and implementing a task queue behaviour.
        It is indipendent from the mosaic application and logic and is good to be reused in other projects.

        MosaicBuilder: contains the specific logic to transform an image into a tile based mosaic.
        It can be used elsewhere to transform any image in a mosaic.
        The client orchestrate the application flow and depends on this module for the concreate computation.

    Other application scripts:

        client.js: Define the application flow, implementing the UI interaction via handlers and DOM modifications.
        Depends on the other modules to implement the mosaic transformation.

        mosaic.js: Contains constants shared between server and client 
    

Feature improvements:

        User Experience:
            Provided user experience is not minimal but it can be enanched, some improvements are:
                * Cross-device compatibility
                * Different design and user interactions based on devices type and screen size
                * Computation progress feedback
                * Keep of the successfull transformed images (results)
                * Results organized as gallery of smaller preview images with actions (zoom, delete, export ecc)
            The delivered status of the UI compromise completeness with a good enough to be usable due to no specific requirements in the assignment and the suggested time to complete the task.

         
        Performace:
            Tiles request to server:
                On medium to big images an average of 10-30% of hex color are repeated
                Browser cache avoid requests of the same tile to hit the server so that's not a big issue.
                It can be worth verify if an application internal cache (a dictionary based on retrieved hex color) is better than leave to the browser the task

            Canvas draw:
                Draw each tile into an Canvas already attached to the DOM is an heavy operation but as per requirement the canvas need to be refreshed on each row render completition.
                It may improve the performance create ahead a single in memory image per row and append it in an atomic operation to the final canvas.
                I think is worth it to spend some time to find other/better solutions:
                    ImageBitmap

            Worker postMessage data transfer:
                The worker are used to compute the slices images data into svg content based on hex
                Data transfer between worker and parent context is default as copy object.
                Image sent to the worker and svg content sent back increase the network traffic.
                This point can be improved using Transferable Objects.  


Open issues:
    Make row render atomic
        Cell tiles are added one by one to the main canvas, this result in row rendered cell by cell against the assignment specification
